pp :: Result -> IO () --Haskelle, Haskelelle, rede mihi středníkes meas
pp x = putStr (concat (map (++"\n") x)) --printing result

type Result = [String]

puzzle2 :: Result
puzzle2 = ["AC DE",
           "FBHIJ",
           "KGLNO",
           "PQMRS",
           "UVWXT"]

puzzle :: Result -> [Char] -> Result --Applying moves
puzzle _ [] = []
puzzle (xs) (y:ys) = let puzzle3 = concat xs --Making it string 'couse I am dumb
                         move = y
                     in (puzzle (check puzzle3 y) ys)
                        
check :: [Char] -> Char -> Result --Processing moves
check (x:z:xs) y | x == ' '&& z == y = makeLoS (repL (x:z:xs) y)
check (x:z:xs) y | x == y&& z == ' ' = makeLoS (repR (x:z:xs) y)
check (x:z:xs) y | x == ' '&& (head(drop(kdejsem (negate 5) ' ' (x:z:xs)) (x:z:xs))) == y = makeLoS (repU (x:z:xs) y)
check (x:z:xs) y | x == ' '&& (head(drop(kdejsem 5 ' ' (x:z:xs)) (x:z:xs))) == y = makeLoS (repD (x:z:xs) y)
                 |otherwise = (check(z:xs) y)
check [x] _ = [[]]
check [] _ = [[]]

repR :: String -> Char -> String
repR (x:xs) y = replace (kdejsem (negate 1) y (x:xs)) ' ' (replace (kdejsem 1 y (x:xs)) y (x:xs)) --Myslim, že vím, v čem byla ta chyba :D

repL :: String -> Char -> String
repL (x:xs) y = replace (kdejsem 1 y (x:xs)) ' ' (replace (kdejsem (negate 1) y (x:xs)) y (x:xs)) 

repU :: String -> Char -> String
repU (x:xs) y = replace (kdejsem 0 y (x:xs)) ' ' (replace (kdejsem 5 y (x:xs)) y (x:xs)) 

repD :: String -> Char -> String
repD (x:xs) y = replace (kdejsem 5 y (x:xs)) ' ' (replace (kdejsem (negate 5) y (x:xs)) y (x:xs)) 

replace :: Int -> Char -> String -> String
replace i c st = take i st ++ (c:[]) ++ drop (i + 1) st

kdejsem :: Int -> Char -> String -> Int --My position in string
kdejsem n y (x:xs) = let z = 1 
                   in if x == y then (z+n) 
                      else kdejsem (z+1) y xs

makeLoS :: String -> [String] --Making it List of strings again
makeLoS [] = []
makeLoS st = take 5 st : makeLoS (drop 5 st)


                            


            




